/****************************************************************************
** Meta object code from reading C++ file 'tst_test.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.5.3)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#if __has_include(<QtCore/qtmochelpers.h>)
#include <QtCore/qtmochelpers.h>
#else
QT_BEGIN_MOC_NAMESPACE
#endif


#include <memory>

#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_test.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.5.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSTestENDCLASS_t {};
static constexpr auto qt_meta_stringdata_CLASSTestENDCLASS = QtMocHelpers::stringData(
    "Test",
    "initTestCase",
    "",
    "test_wrongCardsDoesNotUnlock",
    "test_rightCardsDoesUnlock",
    "test_wrongCardDoesnNotLock",
    "test_rightCardLocks",
    "test_leverFWDAndCan",
    "test_topLightsInNeutral",
    "test_topLightsNotInNeutral",
    "test_neutralSyncPressed",
    "test_notNeutralSyncPressed",
    "test_testCANMessages",
    "test_calibrationForNeutral",
    "cleanupTestCase"
);
#else  // !QT_MOC_HAS_STRING_DATA
struct qt_meta_stringdata_CLASSTestENDCLASS_t {
    uint offsetsAndSizes[30];
    char stringdata0[5];
    char stringdata1[13];
    char stringdata2[1];
    char stringdata3[29];
    char stringdata4[26];
    char stringdata5[27];
    char stringdata6[20];
    char stringdata7[20];
    char stringdata8[24];
    char stringdata9[27];
    char stringdata10[24];
    char stringdata11[27];
    char stringdata12[21];
    char stringdata13[27];
    char stringdata14[16];
};
#define QT_MOC_LITERAL(ofs, len) \
    uint(sizeof(qt_meta_stringdata_CLASSTestENDCLASS_t::offsetsAndSizes) + ofs), len 
Q_CONSTINIT static const qt_meta_stringdata_CLASSTestENDCLASS_t qt_meta_stringdata_CLASSTestENDCLASS = {
    {
        QT_MOC_LITERAL(0, 4),  // "Test"
        QT_MOC_LITERAL(5, 12),  // "initTestCase"
        QT_MOC_LITERAL(18, 0),  // ""
        QT_MOC_LITERAL(19, 28),  // "test_wrongCardsDoesNotUnlock"
        QT_MOC_LITERAL(48, 25),  // "test_rightCardsDoesUnlock"
        QT_MOC_LITERAL(74, 26),  // "test_wrongCardDoesnNotLock"
        QT_MOC_LITERAL(101, 19),  // "test_rightCardLocks"
        QT_MOC_LITERAL(121, 19),  // "test_leverFWDAndCan"
        QT_MOC_LITERAL(141, 23),  // "test_topLightsInNeutral"
        QT_MOC_LITERAL(165, 26),  // "test_topLightsNotInNeutral"
        QT_MOC_LITERAL(192, 23),  // "test_neutralSyncPressed"
        QT_MOC_LITERAL(216, 26),  // "test_notNeutralSyncPressed"
        QT_MOC_LITERAL(243, 20),  // "test_testCANMessages"
        QT_MOC_LITERAL(264, 26),  // "test_calibrationForNeutral"
        QT_MOC_LITERAL(291, 15)   // "cleanupTestCase"
    },
    "Test",
    "initTestCase",
    "",
    "test_wrongCardsDoesNotUnlock",
    "test_rightCardsDoesUnlock",
    "test_wrongCardDoesnNotLock",
    "test_rightCardLocks",
    "test_leverFWDAndCan",
    "test_topLightsInNeutral",
    "test_topLightsNotInNeutral",
    "test_neutralSyncPressed",
    "test_notNeutralSyncPressed",
    "test_testCANMessages",
    "test_calibrationForNeutral",
    "cleanupTestCase"
};
#undef QT_MOC_LITERAL
#endif // !QT_MOC_HAS_STRING_DATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSTestENDCLASS[] = {

 // content:
      11,       // revision
       0,       // classname
       0,    0, // classinfo
      13,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,   92,    2, 0x08,    1 /* Private */,
       3,    0,   93,    2, 0x08,    2 /* Private */,
       4,    0,   94,    2, 0x08,    3 /* Private */,
       5,    0,   95,    2, 0x08,    4 /* Private */,
       6,    0,   96,    2, 0x08,    5 /* Private */,
       7,    0,   97,    2, 0x08,    6 /* Private */,
       8,    0,   98,    2, 0x08,    7 /* Private */,
       9,    0,   99,    2, 0x08,    8 /* Private */,
      10,    0,  100,    2, 0x08,    9 /* Private */,
      11,    0,  101,    2, 0x08,   10 /* Private */,
      12,    0,  102,    2, 0x08,   11 /* Private */,
      13,    0,  103,    2, 0x08,   12 /* Private */,
      14,    0,  104,    2, 0x08,   13 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject Test::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSTestENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSTestENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSTestENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<Test, std::true_type>,
        // method 'initTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_wrongCardsDoesNotUnlock'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_rightCardsDoesUnlock'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_wrongCardDoesnNotLock'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_rightCardLocks'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_leverFWDAndCan'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_topLightsInNeutral'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_topLightsNotInNeutral'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_neutralSyncPressed'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_notNeutralSyncPressed'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_testCANMessages'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_calibrationForNeutral'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void Test::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<Test *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->test_wrongCardsDoesNotUnlock(); break;
        case 2: _t->test_rightCardsDoesUnlock(); break;
        case 3: _t->test_wrongCardDoesnNotLock(); break;
        case 4: _t->test_rightCardLocks(); break;
        case 5: _t->test_leverFWDAndCan(); break;
        case 6: _t->test_topLightsInNeutral(); break;
        case 7: _t->test_topLightsNotInNeutral(); break;
        case 8: _t->test_neutralSyncPressed(); break;
        case 9: _t->test_notNeutralSyncPressed(); break;
        case 10: _t->test_testCANMessages(); break;
        case 11: _t->test_calibrationForNeutral(); break;
        case 12: _t->cleanupTestCase(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *Test::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *Test::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSTestENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int Test::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 13)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 13;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 13)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 13;
    }
    return _id;
}
QT_WARNING_POP
